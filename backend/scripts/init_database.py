# backend/scripts/init_database.py - Updated with Company Collections
import asyncio
import os
import sys
from datetime import datetime

# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç import path - ‡πÄ‡∏û‡∏¥‡πà‡∏° backend folder ‡∏•‡∏á‡πÉ‡∏ô Python path
current_dir = os.path.dirname(os.path.abspath(__file__))  # scripts folder
backend_dir = os.path.dirname(current_dir)  # backend folder
sys.path.insert(0, backend_dir)

# Load environment variables
from dotenv import load_dotenv
load_dotenv(os.path.join(backend_dir, '.env'))

# ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ import ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
from core.database import connect_to_mongo, get_database

async def create_collections_and_indexes():
    """
    üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á Collections ‡πÅ‡∏•‡∏∞ Indexes ‡∏ï‡∏≤‡∏° Data Dictionary PDF + Company Management
    """
    try:
        db = get_database()
        
        print("üóÑÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° PDF Data Dictionary...")
        print("‚úÖ ‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó (Company Management)")
        print("(‡πÑ‡∏°‡πà‡∏°‡∏µ Mock Data - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á)")
        
        # =================================================================
        # 1. USERS COLLECTION (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)
        # =================================================================
        print("1Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á users collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö users
        await db.users.create_index("username", unique=True)
        await db.users.create_index("email", unique=True) 
        await db.users.create_index("user_type")
        await db.users.create_index("company_id")  # ‡πÄ‡∏û‡∏¥‡πà‡∏° index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö company_id
        print("   ‚úÖ users indexes created")
        
        # =================================================================
        # 2. COMPANIES COLLECTION (‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó) - ‡πÉ‡∏´‡∏°‡πà
        # =================================================================
        print("2Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á companies collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö companies
        await db.companies.create_index("name", unique=True)
        await db.companies.create_index("industry")
        await db.companies.create_index("is_active")
        await db.companies.create_index("created_at")
        print("   ‚úÖ companies indexes created")
        
        # =================================================================
        # 3. COMPANY_HR_ASSIGNMENTS COLLECTION (‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î HR ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó) - ‡πÉ‡∏´‡∏°‡πà
        # =================================================================
        print("3Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á company_hr_assignments collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö company_hr_assignments
        await db.company_hr_assignments.create_index([("company_id", 1), ("user_id", 1)], unique=True)
        await db.company_hr_assignments.create_index("company_id")
        await db.company_hr_assignments.create_index("user_id")
        await db.company_hr_assignments.create_index("assigned_at")
        print("   ‚úÖ company_hr_assignments indexes created")
        
        # =================================================================
        # 4. RESUMES COLLECTION (‡πÄ‡∏£‡∏ã‡∏π‡πÄ‡∏°‡πà)
        # =================================================================
        print("4Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á resumes collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö resumes
        await db.resumes.create_index("user_id")
        await db.resumes.create_index("file_type")
        await db.resumes.create_index("uploaded_at")
        print("   ‚úÖ resumes indexes created")
        
        # =================================================================
        # 5. JOB_POSITIONS COLLECTION (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô)
        # =================================================================
        print("5Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á job_positions collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö job_positions
        await db.job_positions.create_index("user_id")  # HR ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
        await db.job_positions.create_index("company_id")  # ‡πÄ‡∏û‡∏¥‡πà‡∏° company_id
        await db.job_positions.create_index("title")
        await db.job_positions.create_index("is_active")
        await db.job_positions.create_index("department")
        await db.job_positions.create_index("created_at")
        print("   ‚úÖ job_positions indexes created")
        
        # =================================================================
        # 6. SKILLS COLLECTION (‡∏ó‡∏±‡∏Å‡∏©‡∏∞)
        # =================================================================
        print("6Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á skills collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö skills
        await db.skills.create_index("name", unique=True)
        await db.skills.create_index("type")  # Hard Skill, Soft Skill
        await db.skills.create_index("category")
        print("   ‚úÖ skills indexes created")
        
        # =================================================================
        # 7. RESUME_SKILLS COLLECTION (‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏ô‡πÄ‡∏£‡∏ã‡∏π‡πÄ‡∏°‡πà)
        # =================================================================
        print("7Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á resume_skills collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö resume_skills
        await db.resume_skills.create_index([("resume_id", 1), ("skill_id", 1)], unique=True)
        await db.resume_skills.create_index("resume_id")
        await db.resume_skills.create_index("skill_id")
        await db.resume_skills.create_index("proficiency_level")
        print("   ‚úÖ resume_skills indexes created")
        
        # =================================================================
        # 8. JOB_SKILLS COLLECTION (‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô)
        # =================================================================
        print("8Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á job_skills collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö job_skills
        await db.job_skills.create_index([("position_id", 1), ("skill_id", 1)], unique=True)
        await db.job_skills.create_index("position_id")
        await db.job_skills.create_index("skill_id")
        await db.job_skills.create_index("priority")
        print("   ‚úÖ job_skills indexes created")
        
        # =================================================================
        # 9. MATCHING_RESULTS COLLECTION (‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà)
        # =================================================================
        print("9Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á matching_results collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö matching_results
        await db.matching_results.create_index([("resume_id", 1), ("position_id", 1)], unique=True)
        await db.matching_results.create_index("resume_id")
        await db.matching_results.create_index("position_id")
        await db.matching_results.create_index("matching_score")
        await db.matching_results.create_index("status")
        await db.matching_results.create_index("created_at")
        print("   ‚úÖ matching_results indexes created")
        
        # =================================================================
        # 10. USER_ROLES COLLECTION (‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
        # =================================================================
        print("üîü ‡∏™‡∏£‡πâ‡∏≤‡∏á user_roles collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user_roles
        await db.user_roles.create_index("role_name", unique=True)
        print("   ‚úÖ user_roles indexes created")
        
        # =================================================================
        # 11. USER_ROLE_ASSIGNMENTS COLLECTION (‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó)
        # =================================================================
        print("1Ô∏è‚É£1Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á user_role_assignments collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user_role_assignments
        await db.user_role_assignments.create_index([("user_id", 1), ("role_id", 1)], unique=True)
        await db.user_role_assignments.create_index("user_id")
        await db.user_role_assignments.create_index("role_id")
        await db.user_role_assignments.create_index("role_name")
        print("   ‚úÖ user_role_assignments indexes created")
        
        print("üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! (‡∏£‡∏ß‡∏° Company Management)")
        
    except Exception as e:
        print(f"‚ùå Error creating database structure: {e}")

async def verify_database_structure():
    """
    üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
    """
    try:
        db = get_database()
        
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
        
        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô collections
        collections = await db.list_collection_names()
        print(f"üìã Collections ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á ({len(collections)}): {collections}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞ collection ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ Mock Data)
        expected_collections = [
            'users', 'companies', 'company_hr_assignments', 'resumes', 
            'job_positions', 'skills', 'resume_skills', 'job_skills', 
            'matching_results', 'user_roles', 'user_role_assignments'
        ]
        
        for collection_name in expected_collections:
            if collection_name in collections:
                collection = db[collection_name]
                count = await collection.count_documents({})
                print(f"   üìä {collection_name}: {count} documents (‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö)")
            else:
                print(f"   ‚ö†Ô∏è {collection_name}: ‡πÑ‡∏°‡πà‡∏û‡∏ö collection")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö indexes ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        print("üìá ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö indexes ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:")
        important_collections = ['users', 'companies', 'company_hr_assignments', 'resumes', 'job_positions']
        for col_name in important_collections:
            if col_name in collections:
                indexes = await db[col_name].list_indexes().to_list(length=None)
                index_names = [idx['name'] for idx in indexes if idx['name'] != '_id_']
                print(f"   üîç {col_name}: {index_names}")
        
        print("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        
    except Exception as e:
        print(f"‚ùå Error verifying database: {e}")

async def create_default_admin():
    """
    üëë ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin account ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
    """
    try:
        db = get_database()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Admin ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        existing_admin = await db.users.find_one({"user_type": "Admin"})
        
        if not existing_admin:
            print("üëë ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin account ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
            
            # Import hash_password function
            from core.auth import hash_password
            
            admin_data = {
                "username": "admin",
                "email": "admin@internscreen.com",
                "password_hash": hash_password("admin123"),
                "full_name": "System Administrator",
                "phone": None,
                "user_type": "Admin",
                "company_id": None,
                "is_active": True,
                "is_verified": True,
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow(),
                "last_login": None
            }
            
            result = await db.users.insert_one(admin_data)
            admin_id = result.inserted_id
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin role (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
            admin_role = await db.user_roles.find_one({"role_name": "Admin"})
            if admin_role:
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î role ‡πÉ‡∏´‡πâ admin
                await db.user_role_assignments.insert_one({
                    "user_id": admin_id,
                    "role_id": admin_role["_id"],
                    "role_name": "Admin",
                    "assigned_at": datetime.utcnow(),
                    "assigned_by": "system"
                })
            
            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin account ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            print(f"   üë§ Username: admin")
            print(f"   üìß Email: admin@internscreen.com") 
            print(f"   üîë Password: admin123")
            print(f"   ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å!")
            
        else:
            print("üëë ‡∏û‡∏ö Admin account ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ç‡πâ‡∏≤‡∏°")
            
    except Exception as e:
        print(f"‚ùå Error creating default admin: {e}")

async def create_default_roles():
    """
    üé≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á default user roles
    """
    try:
        db = get_database()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ roles ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        existing_roles = await db.user_roles.count_documents({})
        
        if existing_roles == 0:
            print("üé≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á default user roles...")
            
            default_roles = [
                {
                    "role_name": "Student",
                    "description": "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô",
                    "permissions": {
                        "can_upload_resume": True,
                        "can_view_jobs": True,
                        "can_apply_jobs": True,
                        "can_view_profile": True
                    },
                    "created_at": datetime.utcnow()
                },
                {
                    "role_name": "HR",
                    "description": "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà HR ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó",
                    "permissions": {
                        "can_create_jobs": True,
                        "can_view_resumes": True,
                        "can_screen_candidates": True,
                        "can_manage_interviews": True,
                        "can_manage_company_jobs": True
                    },
                    "created_at": datetime.utcnow()
                },
                {
                    "role_name": "Admin",
                    "description": "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
                    "permissions": {
                        "can_manage_users": True,
                        "can_manage_companies": True,
                        "can_view_analytics": True,
                        "can_manage_system": True,
                        "can_assign_hr_to_companies": True
                    },
                    "created_at": datetime.utcnow()
                }
            ]
            
            await db.user_roles.insert_many(default_roles)
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á default user roles ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
        else:
            print("üé≠ ‡∏û‡∏ö user roles ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ç‡πâ‡∏≤‡∏°")
            
    except Exception as e:
        print(f"‚ùå Error creating default roles: {e}")

async def main():
    """
    üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    """
    try:
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI Resume Screening System")
        print("üéØ ‡πÇ‡∏´‡∏°‡∏î: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á + Admin Account + Company Management")
        print("=" * 70)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await connect_to_mongo()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á default roles ‡∏Å‡πà‡∏≠‡∏ô
        await create_default_roles()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await create_collections_and_indexes()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á default admin account
        await create_default_admin()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        await verify_database_structure()
        
        print("=" * 70)
        print("üéâ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
        print("üìù ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print("")
        print("üåê Frontend: http://localhost:3000")
        print("üìö API Docs: http://localhost:8000/docs")
        print("")
        print("üëë Admin Login:")
        print("   Username: admin")
        print("   Password: admin123")
        print("")
        print("‚ú® ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print("   - ‡∏£‡∏∞‡∏ö‡∏ö Authentication (Login/Register)")
        print("   - Admin Dashboard (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)")
        print("   - Company Management (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó)")
        print("   - HR Assignment (‡∏Å‡∏≥‡∏´‡∏ô‡∏î HR ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó)")
        print("   - HR Dashboard (‡∏´‡∏ô‡πâ‡∏≤ Dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HR)")
        
    except Exception as e:
        print(f"üí• Error in main setup: {e}")

if __name__ == "__main__":
    asyncio.run(main())