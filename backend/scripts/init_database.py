# =============================================================================
# üóÑÔ∏è DATABASE INITIALIZATION - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏°‡∏µ Mock Data
# ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏£‡∏ã‡∏π‡πÄ‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô
# =============================================================================
import asyncio
import os
import sys
from datetime import datetime

# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç import path - ‡πÄ‡∏û‡∏¥‡πà‡∏° backend folder ‡∏•‡∏á‡πÉ‡∏ô Python path
current_dir = os.path.dirname(os.path.abspath(__file__))  # scripts folder
backend_dir = os.path.dirname(current_dir)  # backend folder
sys.path.insert(0, backend_dir)

# Load environment variables
from dotenv import load_dotenv
load_dotenv(os.path.join(backend_dir, '.env'))

# ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ import ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
from core.database import connect_to_mongo, get_database

async def create_collections_and_indexes():
    """
    üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á Collections ‡πÅ‡∏•‡∏∞ Indexes ‡∏ï‡∏≤‡∏° Data Dictionary PDF
    """
    try:
        db = get_database()
        
        print("üóÑÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° PDF Data Dictionary...")
        print("(‡πÑ‡∏°‡πà‡∏°‡∏µ Mock Data - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á)")
        
        # =================================================================
        # 1. USERS COLLECTION (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)
        # =================================================================
        print("1Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á users collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö users
        await db.users.create_index("username", unique=True)
        await db.users.create_index("email", unique=True) 
        await db.users.create_index("user_type")
        print("   ‚úÖ users indexes created")
        
        # =================================================================
        # 2. RESUMES COLLECTION (‡πÄ‡∏£‡∏ã‡∏π‡πÄ‡∏°‡πà)
        # =================================================================
        print("2Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á resumes collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö resumes
        await db.resumes.create_index("user_id")
        await db.resumes.create_index("file_type")
        print("   ‚úÖ resumes indexes created")
        
        # =================================================================
        # 3. JOB_POSITIONS COLLECTION (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏ù‡∏∂‡∏Å‡∏á‡∏≤‡∏ô)
        # =================================================================
        print("3Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á job_positions collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö job_positions
        await db.job_positions.create_index("user_id")  # HR ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
        await db.job_positions.create_index("title")
        await db.job_positions.create_index("is_active")
        await db.job_positions.create_index("department")
        print("   ‚úÖ job_positions indexes created")
        
        # =================================================================
        # 4. SKILLS COLLECTION (‡∏ó‡∏±‡∏Å‡∏©‡∏∞)
        # =================================================================
        print("4Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á skills collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö skills
        await db.skills.create_index("name", unique=True)
        await db.skills.create_index("type")  # Hard Skill, Soft Skill
        await db.skills.create_index("category")
        print("   ‚úÖ skills indexes created")
        
        # =================================================================
        # 5. RESUME_SKILLS COLLECTION (‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏ô‡πÄ‡∏£‡∏ã‡∏π‡πÄ‡∏°‡πà)
        # =================================================================
        print("5Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á resume_skills collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö resume_skills
        await db.resume_skills.create_index([("resume_id", 1), ("skill_id", 1)], unique=True)
        await db.resume_skills.create_index("proficiency_level")
        print("   ‚úÖ resume_skills indexes created")
        
        # =================================================================
        # 6. JOB_SKILLS COLLECTION (‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô)
        # =================================================================
        print("6Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á job_skills collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö job_skills
        await db.job_skills.create_index([("position_id", 1), ("skill_id", 1)], unique=True)
        await db.job_skills.create_index("priority")
        print("   ‚úÖ job_skills indexes created")
        
        # =================================================================
        # 7. MATCHING_RESULTS COLLECTION (‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà)
        # =================================================================
        print("7Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á matching_results collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö matching_results
        await db.matching_results.create_index([("resume_id", 1), ("position_id", 1)], unique=True)
        await db.matching_results.create_index("matching_score")
        await db.matching_results.create_index("status")
        print("   ‚úÖ matching_results indexes created")
        
        # =================================================================
        # 8. USER_ROLES COLLECTION (‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
        # =================================================================
        print("8Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á user_roles collection...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user_roles
        await db.user_roles.create_index("role_name", unique=True)
        print("   ‚úÖ user_roles indexes created")
        
        print("üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
        
    except Exception as e:
        print(f"‚ùå Error creating database structure: {e}")

async def verify_database_structure():
    """
    üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
    """
    try:
        db = get_database()
        
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
        
        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô collections
        collections = await db.list_collection_names()
        print(f"üìã Collections ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á ({len(collections)}): {collections}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞ collection ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ Mock Data)
        for collection_name in collections:
            if collection_name.startswith('system'):  # ‡∏Ç‡πâ‡∏≤‡∏° system collections
                continue
                
            collection = db[collection_name]
            count = await collection.count_documents({})
            print(f"   üìä {collection_name}: {count} documents (‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö)")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö indexes
        print("üìá ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö indexes:")
        important_collections = ['users', 'resumes', 'job_positions', 'skills']
        for col_name in important_collections:
            if col_name in collections:
                indexes = await db[col_name].list_indexes().to_list(length=None)
                index_names = [idx['name'] for idx in indexes if idx['name'] != '_id_']
                print(f"   üîç {col_name}: {index_names}")
        
        print("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        
    except Exception as e:
        print(f"‚ùå Error verifying database: {e}")

async def main():
    """
    üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÑ‡∏°‡πà‡∏°‡∏µ Mock Data)
    """
    try:
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI Resume Screening System")
        print("üéØ ‡πÇ‡∏´‡∏°‡∏î: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ Mock Data)")
        print("=" * 60)
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await connect_to_mongo()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await create_collections_and_indexes()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        await verify_database_structure()
        
        print("=" * 60)
        print("üéâ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
        print("üìù ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
        print("üåê Frontend: http://localhost:3000")
        print("üìö API Docs: http://localhost:8000/docs")
        
    except Exception as e:
        print(f"üí• Error in main setup: {e}")

if __name__ == "__main__":
    asyncio.run(main())