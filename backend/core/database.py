# =============================================================================
# FIXED DATABASE CONNECTION üóÑÔ∏è (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Motor error ‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ connection string ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ SSL)
# Phase 1: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB Atlas ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
# =============================================================================
import os
import motor.motor_asyncio
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô environment variables
load_dotenv()

# =============================================================================
# DATABASE VARIABLES üìä
# =============================================================================
# ‡πÄ‡∏Å‡πá‡∏ö database connection ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏û
database_client = None
database = None

# =============================================================================
# CONNECTION FUNCTIONS üîå
# =============================================================================
async def connect_to_mongo():
    """
    ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ MongoDB Atlas
    - ‡∏≠‡πà‡∏≤‡∏ô connection string ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
    - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    - ‡πÄ‡∏Å‡πá‡∏ö connection ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ
    """
    global database_client, database
    
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô connection string ‡∏à‡∏≤‡∏Å .env
        MONGODB_URL = os.getenv("MONGODB_URL")
        DATABASE_NAME = os.getenv("DATABASE_NAME", "ai_resume_screening")
        
        if not MONGODB_URL:
            raise Exception("‚ùå MONGODB_URL not found in .env file")
        
        print(f"üîÑ Connecting to MongoDB Atlas...")
        print(f"üìÅ Database name: {DATABASE_NAME}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ - ‡πÉ‡∏´‡πâ connection string ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ SSL
        database_client = motor.motor_asyncio.AsyncIOMotorClient(MONGODB_URL)
        
        database = database_client[DATABASE_NAME]
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ping
        await database_client.admin.command('ping')
        
        print("‚úÖ Connected to MongoDB Atlas successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to connect to MongoDB: {e}")
        print("üîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        print("   1. ‡πÑ‡∏ü‡∏•‡πå .env ‡∏°‡∏µ MONGODB_URL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        print("   2. Internet connection")
        print("   3. MongoDB Atlas cluster ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        print("   4. IP Address ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô MongoDB Atlas ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        raise e

async def close_mongo_connection():
    """
    ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    - ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    """
    global database_client
    
    if database_client is not None:
        database_client.close()
        print("üîå Disconnected from MongoDB Atlas")

async def test_connection():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
    - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health check endpoint
    - return status ‡πÅ‡∏•‡∏∞ message
    """
    try:
        if database_client is None:
            return {
                "status": "unhealthy", 
                "message": "Database client not connected"
            }
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ping
        result = await database_client.admin.command('ping')
        
        return {
            "status": "healthy", 
            "message": "MongoDB Atlas connection successful",
            "ping_result": result
        }
        
    except Exception as e:
        return {
            "status": "unhealthy", 
            "message": f"MongoDB connection failed: {str(e)}"
        }

# =============================================================================
# HELPER FUNCTIONS üõ†Ô∏è
# =============================================================================
def get_database():
    """
    ‡πÑ‡∏î‡πâ database instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô routes ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
    """
    if database is None:
        raise Exception("Database not connected. Call connect_to_mongo() first.")
    return database

def get_client():
    """
    ‡πÑ‡∏î‡πâ database client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö admin
    """
    if database_client is None:
        raise Exception("Database client not connected. Call connect_to_mongo() first.")
    return database_client

# =============================================================================
# TESTING FUNCTIONS üß™ - ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
# =============================================================================
async def test_insert_data():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á database
    - ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    """
    try:
        db = get_database()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á test_collection
        test_data = {
            "message": "Hello from AI Resume Screening System!",
            "timestamp": "2025-06-05",
            "test": True
        }
        
        result = await db.test_collection.insert_one(test_data)
        print(f"‚úÖ Test data inserted with ID: {result.inserted_id}")
        
        return {"success": True, "inserted_id": str(result.inserted_id)}
        
    except Exception as e:
        print(f"‚ùå Failed to insert test data: {e}")
        return {"success": False, "error": str(e)}

async def test_read_data():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å database
    """
    try:
        db = get_database()
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á test_collection
        documents = await db.test_collection.find().to_list(length=10)
        
        print(f"‚úÖ Found {len(documents)} test documents")
        return {"success": True, "count": len(documents), "data": documents}
        
    except Exception as e:
        print(f"‚ùå Failed to read test data: {e}")
        return {"success": False, "error": str(e)}

# =============================================================================
# COMPATIBILITY FUNCTIONS üîÑ - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
# =============================================================================
async def check_database_health():
    """
    Alias ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test_connection() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Å‡πà‡∏≤
    """
    return await test_connection()